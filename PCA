import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler

df=pd.read_csv('/home/ise/1nt19is174/iris.csv')
df.head()

X=df.drop(['species'],axis=1)
x

Y=df['species']
Y

X_scaled = StandardScaler().fit_transform(X)
X_scaled[:5]

features = X_scaled.T
cov_matrix = np.cov(features)
cov_matrix[:5]
values, vectors = np.linalg.eig(cov_matrix)
values[:5]
vectors[:5]

explained_variances = []
for i in range(len(values)):
    explained_variances.append((values[i] / np.sum(values))*100)
print("variances of each feature",explained_variances)
plt.figure(figsize=(8,4))
plt.bar(range(4),explained_variances, alpha=0.6)
plt.ylabel('Percentage of explained variance')
plt.xlabel('Dimensions')
projected_1 = X_scaled.dot(vectors.T[0])
projected_2 = X_scaled.dot(vectors.T[1])
res = pd.DataFrame(projected_1, columns=['PC1'])
res['PC2'] = projected_2
res['Y'] = Y
res.head()
sns.FacetGrid(res, hue="Y", height=6).map(plt.scatter, 'PC1', 'PC2').add_legend()
plt.show()


---------------------
or
---------------------

import pandas as pd
df = pd.read_csv("iris.csv")

# Prepare X and Y
X = df.values[:,:-1]
Y = df.values[:,-1]

df.head()

df

X_standard = X - X.mean()
X_standard

type(X_standard)

Y_standard = Y
Y_standard

type(Y_standard)

cov = np.cov(X.T)  
print("covariance matrix =\n",cov)

from numpy import linalg as LA
lambdas, vs = LA.eig(cov)

lambdas

vs

lambdas

sorted_index = np.argsort(lambdas)[::-1]

sorted_index

sorted_eigenvalue = lambdas[sorted_index]

sorted_eigenvalue

sorted_eigenvectors = vs[:,sorted_index]

sorted_eigenvectors

n_components = 2 #you can select any number of components.
eigenvector_subset = sorted_eigenvectors[:,0:n_components]

eigenvector_subset

X_reduced = np.dot(eigenvector_subset.transpose(),X.transpose()).transpose()

print("Information/Variance in PC1",(sorted_eigenvalue[0]/(sorted_eigenvalue[0]+sorted_eigenvalue[1]))*100)

X_reduced

import matplotlib.pyplot as plt
plt.xlabel('Principal Component - 1',fontsize=20)
plt.ylabel('Principal Component - 2',fontsize=20)
plt.scatter(X_reduced[:,0:1],X_reduced[:,-1],c=Y)
plt.show()

